@using Kendo.Mvc.UI
@using Models
@{
    ViewBag.Title = "Quản lý sinh viên";
    ViewBag.Category = "Quản lý";
    ViewBag.Section = "Sinh viên";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

@section Kendo
{
    @Styles.Render("~/Content/kendo")
    @Scripts.Render("~/Script/kendo")
}


@(Html.Kendo().Grid<Models.Student>()
      .Name("grid")
      .Columns(columns =>
      {
          columns.Bound(c => c.StudentId);
          columns.Bound(c => c.StudentName);
          columns.Bound(c => c.BirthDate);
          columns.Bound(c => c.Address);
          columns.Bound(c => c.Phone);
          columns.Bound(c => c.Cpa);
          columns.ForeignKey(p => p.ClassId, (IQueryable<StudentClass>) ViewBag.StudentClasses, "ClassId", "ClassName").EditorTemplateName("StudentClassTemplate");
          columns.Command(command =>
          {
              command.Edit();
              command.Destroy();
          }).Width(180);
      })
      .ToolBar(toolbar => { toolbar.Create(); })
      .Editable(editable => editable.Mode(GridEditMode.PopUp))
      .Pageable()
      .Sortable(sortable => { sortable.SortMode(GridSortMode.SingleColumn); })
      .Filterable(filterable => filterable.Mode(GridFilterMode.Row))
      .Scrollable()
      .ClientDetailTemplateId("template")
      .DataSource(dataSource => dataSource
          .Ajax()
          .Model(model => model.Id(p => p.StudentId))
          .Read(read => read.Action("Students_Read", "Student"))
          .Create(create => create.Action("Students_Create", "Student"))
          .Update(update => update.Action("Students_Update", "Student"))
          .Destroy(destroy => destroy.Action("Students_Destroy", "Student"))
      )
      .Events(events => events
          .Edit("onEdit")
      )
      )

<script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().Grid<LearningClassStudent>()
                  .Name("grid_#=StudentId#") // template expression, to be evaluated in the master context
                  .Columns(columns =>
                  {
                      columns.ForeignKey(p => p.ClassId, (IQueryable<LearningClass>)ViewBag.LearningClasses, "ClassId", "ClassName").EditorTemplateName("LearningClassTemplate");
                      columns.Bound(o => o.MidTermPoint);
                      columns.Bound(o => o.EndTermPoint);
                      columns.Bound(o => o.TotalPoint).Hidden();
                  })
                  .DataSource(dataSource => dataSource
                      .Ajax()
                      .PageSize(10)
                      .Read(read => read.Action("GetLearningClassList", "Student", new { studentId = "#=StudentId#" }))
                  )
                  .Pageable()
                  .Sortable()
                  .ToClientTemplate())
</script>
<script type="text/javascript">

    function onEdit(e) {
        if (!e.model.isNew()) {
            $('[name="StudentId"]').attr("readonly", true);
        }
    }
</script>