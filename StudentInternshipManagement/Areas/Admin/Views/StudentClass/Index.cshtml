@using Kendo.Mvc.UI
@using Models
@{
    ViewBag.Title = "Quản lý lớp sinh viên";
    ViewBag.Category = "Quản lý";
    ViewBag.Section = "Lớp sinh viên";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

@section Kendo
{
    @Styles.Render("~/Content/kendo")
    @Scripts.Render("~/Script/kendo")
}


@(Html.Kendo().Grid<Models.StudentClass>()
              .Name("grid")
              .Columns(columns =>
              {
                  columns.Bound(c => c.ClassId);
                  columns.Bound(c => c.ClassName);
                  columns.ForeignKey(p => p.DepartmentId, (IQueryable<Department>)ViewBag.Departments, "DepartmentId", "DepartmentName").EditorTemplateName("DepartmentTemplate");
                  columns.Command(command => { command.Edit(); command.Destroy(); }).Width(180);
              })
              .ToolBar(toolbar =>
              {
                  toolbar.Create();
              })
              .Editable(editable => editable.Mode(GridEditMode.PopUp))
              .Pageable()
              .Sortable(sortable =>
              {
                  sortable.SortMode(GridSortMode.SingleColumn);
              })
              .Filterable(filterable => filterable.Mode(GridFilterMode.Row))
              .Scrollable()
              .ClientDetailTemplateId("template")
              .DataSource(dataSource => dataSource
                  .Ajax()
                  .Model(model => model.Id(p => p.ClassId))
                  .Read(read => read.Action("StudentClasses_Read", "StudentClass"))
                  .Create(create => create.Action("StudentClasses_Create", "StudentClass"))
                  .Update(update => update.Action("StudentClasses_Update", "StudentClass"))
                  .Destroy(destroy => destroy.Action("StudentClasses_Destroy", "StudentClass"))
              )
              .Events(events => events
                  .Edit("onEdit")
              )
)

<script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().Grid<Student>()
                  .Name("grid_#=ClassId#") // template expression, to be evaluated in the master context
                  .Columns(columns =>
                  {
                      columns.Bound(o => o.StudentId);
                      columns.Bound(o => o.StudentName);
                      columns.Bound(o => o.BirthDate);
                      columns.Bound(o => o.Address);
                      columns.Bound(o => o.Phone);
                      columns.Bound(o => o.Cpa);
                  })
                  .DataSource(dataSource => dataSource
                      .Ajax()
                      .PageSize(10)
                      .Read(read => read.Action("Students_ReadByClass", "Student", new { area = "Admin", classId = "#=ClassId#" }))
                  )
                  .Pageable()
                  .Sortable()
                  .ToClientTemplate()
    )
</script>
<script type="text/javascript">

    function onEdit(e) {
        $('[name="ClassId"]').attr("readonly", true);
    }
</script>