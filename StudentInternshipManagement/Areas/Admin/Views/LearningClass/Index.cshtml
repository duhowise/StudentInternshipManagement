@using Kendo.Mvc.UI
@using Models
@using Models.Entities
@{
    ViewBag.Title = "Quản lý sinh viên";
    ViewBag.Category = "Quản lý";
    ViewBag.Section = "Sinh viên";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

@section Kendo
{
    @Styles.Render("~/Content/kendo/2018.2.516/styles")
    @Scripts.Render("~/Scripts/kendo/2018.2.516/scripts")
}

@(Html.Kendo().Grid<LearningClass>()
      .Name("grid")
      .Columns(columns =>
      {
          columns.Bound(c => c.ClassId);
          columns.Bound(c => c.ClassName);
          columns.ForeignKey(p => p.SubjectId, (IQueryable<Subject>) ViewBag.Subjects, "SubjectId", "SubjectName").EditorTemplateName("SubjectTemplate");
          columns.Bound(p => p.SemesterId).EditorTemplateName("SemesterTemplate");
          columns.Command(command =>
          {
              command.Edit();
              command.Destroy();
          }).Width(180);
      })
      .ToolBar(toolbar => { toolbar.Create(); })
      .Editable(editable => editable.Mode(GridEditMode.PopUp))
      .Pageable()
      .Sortable(sortable => { sortable.SortMode(GridSortMode.SingleColumn); })
      .Filterable(filterable => filterable.Mode(GridFilterMode.Row))
      .Scrollable()
      .ClientDetailTemplateId("template")
      .DataSource(dataSource => dataSource
          .Ajax()
          .Model(model => model.Id(p => p.ClassId))
          .Read(read => read.Action("LearningClasses_Read", "LearningClass"))
          .Create(create => create.Action("LearningClasses_Create", "LearningClass"))
          .Update(update => update.Action("LearningClasses_Update", "LearningClass"))
          .Destroy(destroy => destroy.Action("LearningClasses_Destroy", "LearningClass"))
      )
      .Events(events => events
          .Edit("onEdit")
      )
      )

<script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().Grid<LearningClassStudent>()
          .Name("grid_#=ClassId#") // template expression, to be evaluated in the master context
          .Columns(columns =>
          {
              columns.ForeignKey(p => p.StudentId, (IQueryable<Student>) ViewBag.Students, "StudentId", "StudentName").EditorTemplateName("StudentTemplate");
              columns.ForeignKey(p => p.ClassId, (IQueryable<LearningClass>)ViewBag.LearningClasses, "ClassId", "ClassName").EditorTemplateName("LearningClassTemplate");
              columns.Bound(o => o.MidTermPoint);
              columns.Bound(o => o.EndTermPoint);
              columns.Bound(o => o.TotalPoint).Hidden();
          })
          .DataSource(dataSource => dataSource
              .Ajax()
              .PageSize(10)
              .Read(read => read.Action("GetStudentList", "LearningClass", new {classId = "#=ClassId#" }))
          )
          .Pageable()
          .Sortable()
          .ToClientTemplate())
</script>
<script type="text/javascript">

    function onEdit(e) {
        $('[name="ClassId"]').attr("readonly", true);
    }
</script>